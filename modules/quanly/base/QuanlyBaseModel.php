<?php


namespace app\modules\quanly\base;


use yii\db\ActiveRecord;
use Yii;


use yii\helpers\ArrayHelper;
use app\modules\services\UtilityService;

class QuanlyBaseModel extends ActiveRecord
{
    public function beforeSave($insert)
    {
        if($this->isNewRecord){
            if($this->hasAttribute('status')){
                $this->status = 1;
            }
            // if($this->hasAttribute('created_by')){
            //     $this->created_by = Yii::$app->user->isGuest ? 0 : Yii::$app->user->id;
            // }
            // if($this->hasAttribute('created_at')){
            //     $this->created_at = date('Y-m-d H:i:s');
            // }
        } else {
            // if($this->hasAttribute('updated_by')){
            //     $this->updated_by = Yii::$app->user->isGuest ? 0 : Yii::$app->user->id;
            // }
            // if($this->hasAttribute('updated_at')){
            //     $this->updated_at = date('Y-m-d H:i:s');
            // }
        }

        $dateAttributes = ArrayHelper::index($this->getTableSchema()->columns, 'name', 'type');
        if(isset($dateAttributes['date'])) {

            foreach ($dateAttributes['date'] as $dateAttribute) {
                $this[$dateAttribute->name] = UtilityService::convertDateFromMaskedInput($this[$dateAttribute->name]);
            }
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function createMultiple($modelClass, $multipleModels = [])
    {
        $model = new $modelClass;
        $formName = $model->formName();
        $post = \Yii::$app->request->post($formName);
        $models = [];

        if (!empty($multipleModels)) {
            $keys = array_keys(ArrayHelper::map($multipleModels, 'id', 'id'));
            $multipleModels = array_combine($keys, $multipleModels);
        }

        if ($post && is_array($post)) {
            foreach ($post as $i => $item) {
                if (isset($item['id']) && !empty($item['id']) && isset($multipleModels[$item['id']])) {
                    $models[] = $multipleModels[$item['id']];
                } else {
                    $models[] = new $modelClass;
                }
            }
        }

        unset($model, $formName, $post);

        return $models;
    }

    public static function updateMultiple($modelClass, $multipleModels = [])
    {
        $model = new $modelClass;
        $formName = $model->formName();
        $post = Yii::$app->request->post($formName);
        $models = [];


        if (!empty($multipleModels)) {
            $keys = array_keys(ArrayHelper::map($multipleModels, 'id', 'id'));
            $multipleModels = array_combine($keys, $multipleModels);
        }

        if ($post && is_array($post)) {
            
            foreach ($post as $i => $item) {
                if(is_int($i)){
                    if (isset($item['id']) && !empty($item['id']) && isset($multipleModels[$item['id']])) {
                        $models[] = $multipleModels[$item['id']];
                    } else {
                        $models[] = new $modelClass;
                    }
                }
                
            }
        }
        unset($model, $formName, $post);

       

        return $models;
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->formName() == 'VuViec' && $this->long != null){
            $tableName = $this->tableName();
            \Yii::$app->db->createCommand("UPDATE $tableName SET vi_tri_su_viec = ST_SetSRID(ST_MakePoint($this->long,$this->lat),4326) WHERE id=:id")
                ->bindValue(':id', $this->id)
                ->execute();
        }

        if ($this->formName() == 'NocGia' && $this->long != null){
            $tableName = $this->tableName();
            \Yii::$app->db->createCommand("UPDATE $tableName SET noc_gia = ST_SetSRID(ST_MakePoint($this->long,$this->lat),4326) WHERE id=:id")
                ->bindValue(':id', $this->id)
                ->execute();
        }
       parent::afterSave($insert, $changedAttributes);
    }

    public function afterFind()
    {
        $dateAttributes = ArrayHelper::index($this->getTableSchema()->columns, 'name', 'type');
        if(isset($dateAttributes['date'])) {

            foreach ($dateAttributes['date'] as $dateAttribute) {
                $this[$dateAttribute->name] = UtilityService::convertDateFromDb($this[$dateAttribute->name]);
            }
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function getUser()
    {
        $hoten = 'Không có thông tin';
        if(isset($this->created_by)){
            $hoten = AuthUser::find()->select('fullname')->where(['id' => $this->created_by])->one()->fullname;
        }
        return $hoten;
    }
}